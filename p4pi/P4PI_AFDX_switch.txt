/!\ The following has been tested with a Raspberry PI 4 4Gb RAM model /!\
/!\ The following has been tested on P4PI version p4pi-image-2021-08-23-00b0e048-lite /!\

The goal is to be able to send an AFDX frame from a End System to another ES through P4PI AFDX Switch.

I/ AFDX ES : able to send and receive AFDX frames through Wifi or Ethernet with python script
	receive_afdx_ES.py
	send_afdx_packet_ES.py
	
II/ How to transform a P4PI instance to AFDX switch:

	I) Set up P4PI : see file From_Raspberry_PI_to_P4_Switch
	2) Compile AFDX.p4 program on P4PI instance 
	3) WiFi connectivity is the default on P4PI through AP + br0
	But this is not stable
	=> USE ETHERNET see file P4PI_General_Wiki
	
	4) Run the AFDX program
	5) Test:
		a/ ping with not AFDX frames => frames should be dropped
		b/ ping with AFDX frame => frames should be accepted but dropped (Empty tables)
		c/ connect one port to the other, configure the routing table and check that frames 
		are routed to correct port

	Configuring routing tables via P4RT Shell cmds: see file P4PI_General_Wiki
			te = table_entry["MyIngress.afxd_table"](action="Check_VL")
			te.match["standard_metadata.ingress_port"] = "portValue"
			te.match["hdr.afdx.dstVL"] = "dstVLValue"
			te.action["MaxLength"] = "ParamValue"
			te.action["MCastGrp"] = "ParamValue"
			te.insert
			
	/!\ inserting parameter values be careful about BIT DIRECTION. (example port 1 = 0x01000 not 0x0001)
	In doubt, test via debug mode /!\
	
	/!\ It was noted during testing that table entries with P4RT Shell cmds sometimes do not get saved
	(For uknown reasons for now). To workaround this, table entries are added in the P4 Program.
	example:
	table afdx_table {
		...
		const entries = {
		    //port,  dstVL     MaxLength, McastGrp
		    (0x0100, 0x01) : Check_VL(1500, 1);
		    (0x0100, 0x02) : Drop();
		} 
	}
